name: yaml-$(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
    - refs/heads/main
    - refs/heads/dev

variables:
- name: BuildParameters.RestoreBuildProjects
  value: '**/*.csproj'

- name: BuildParameters.TestProjects
  value: '**/*[Tt]ests/*.csproj'

- name: BuildConfiguration
  value: 'Release'

- name: serviceConnection
  value: 'MTTManaged(48640fa2-e257-4a45-a974-878a933075d5)'

- name: resourceGroup
  value: 'BeyondBasics-RG'

- name: webAppName
  value: 'beyondBasics'

stages:
  - stage: build
    jobs:
    - job: CI
      displayName: CI
      pool:
        vmImage: windows-latest
      steps:
      - checkout: self
        fetchDepth: 1

      - task: DotNetCoreCLI@2
        displayName: Restore
        inputs:
          command: restore
          projects: $(BuildParameters.RestoreBuildProjects)

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: $(BuildParameters.RestoreBuildProjects)
          arguments: --configuration $(BuildConfiguration)

      - task: DotNetCoreCLI@2
        displayName: "Running Tests"
        inputs:
          command: 'test'
          projects: $(BuildParameters.TestProjects)
          arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

      - task: PublishCodeCoverageResults@1
        displayName: "Publish code coverage results"
        inputs:
          codeCoverageTool: "Cobertura"
          summaryFileLocation: '$(Agent.BuildDirectory)/**/coverage.cobertura.xml'

    - job: Publish
      displayName: Publish
      dependsOn: CI
      pool:
        vmImage: ubuntu-latest
      steps:
      - checkout: self
        fetchDepth: 1

      - task: DotNetCoreCLI@2
        displayName: Publish
        inputs:
          command: publish
          publishWebProjects: True
          projects: $(BuildParameters.RestoreBuildProjects)
          arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
          zipAfterPublish: True

      - task: PublishBuildArtifacts@1
        displayName: Publish Artifact
        condition: succeededOrFailed()
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)
          ArtifactName: "app"

  - stage: deployTostaging
    jobs:
      - deployment: DeployToStaging
        displayName: Deploy To Staging
        environment: BBStagingEnvironment
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: tree
                  displayName: Where Am I
                  workingDirectory: $(Agent.BuildDirectory)

                - task: AzureRmWebAppDeployment@4
                  displayName: Deploy App To Test
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: $(serviceConnection)
                    appType: "webAppLinux"
                    WebAppName: $(webAppName)
                    deployToSlotOrASE: true
                    ResourceGroupName: $(resourceGroup)
                    SlotName: "staging"
                    packageForLinux: "$(Agent.BuildDirectory)/app/web.zip"

  - stage: deployToProd
    condition: and(succeeded(), eq(variables.isMain, 'true'))
    dependsOn: DeployToStaging
    jobs:
      - deployment: webDeployToProd
        displayName: Deploy To Prod
        environment: BBProductionEnvironment
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: '$(serviceConnection)'
                  appType: 'webApp'
                  WebAppName: '$(webAppName)'
                  deployToSlotOrASE: true
                  ResourceGroupName: '$(resourceGroup)'
                  SlotName: 'staging'
                  packageForLinux: '$(Agent.BuildDirectory)/app/web.zip'

              - task: AzureAppServiceManage@0
                inputs:
                  azureSubscription: '$(serviceConnection)'
                  Action: 'Swap Slots'
                  WebAppName: '$(webAppName)'
                  ResourceGroupName: '''$(webAppName)'''
                  SourceSlot: 'staging'